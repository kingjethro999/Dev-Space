key : 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

fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "deepseek/deepseek-chat-v3-0324:free",
    "messages": [
      {
        "role": "user",
        "content": "What is the meaning of life?"
      }
    ]
  })
});

fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "openai/gpt-oss-20b:free",
    "messages": [
      {
        "role": "user",
        "content": "What is the meaning of life?"
      }
    ]
  })
});


fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "deepseek/deepseek-r1-0528:free",
    "messages": [
      {
        "role": "user",
        "content": "What is the meaning of life?"
      }
    ]
  })
});

fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "qwen/qwen3-235b-a22b:free",
    "messages": [
      {
        "role": "user",
        "content": "What is the meaning of life?"
      }
    ]
  })
});

fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "microsoft/mai-ds-r1:free",
    "messages": [
      {
        "role": "user",
        "content": "What is the meaning of life?"
      }
    ]
  })
});

fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "meta-llama/llama-4-maverick:free",
    "messages": [
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "What is in this image?"
          },
          {
            "type": "image_url",
            "image_url": {
              "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
            }
          }
        ]
      }
    ]
  })
});


fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "mistralai/mistral-small-3.2-24b-instruct:free",
    "messages": [
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "What is in this image?"
          },
          {
            "type": "image_url",
            "image_url": {
              "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
            }
          }
        ]
      }
    ]
  })
});

fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "google/gemma-3-27b-it:free",
    "messages": [
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "What is in this image?"
          },
          {
            "type": "image_url",
            "image_url": {
              "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
            }
          }
        ]
      }
    ]
  })
});


fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "nvidia/nemotron-nano-9b-v2:free",
    "messages": [
      {
        "role": "user",
        "content": "What is the meaning of life?"
      }
    ]
  })
});

fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "moonshotai/kimi-dev-72b:free",
    "messages": [
      {
        "role": "user",
        "content": "What is the meaning of life?"
      }
    ]
  })
});


fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "google/gemma-2-9b-it:free",
    "messages": [
      {
        "role": "user",
        "content": "What is the meaning of life?"
      }
    ]
  })
});

// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyDmH4ZbzeBY6WUnrlOBhXqouGssttfRreI",
  authDomain: "noctra-682b0.firebaseapp.com",
  projectId: "noctra-682b0",
  storageBucket: "noctra-682b0.firebasestorage.app",
  messagingSenderId: "585618824787",
  appId: "1:585618824787:web:dfcc5ed1bb92104c00b0a6"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);


// Import the functions you need from the SDKs you needimport { initializeApp } from "firebase/app";// TODO: Add SDKs for Firebase products that you want to use// https://firebase.google.com/docs/web/setup#available-libraries// Your web app's Firebase configurationconst firebaseConfig = {  apiKey: "AIzaSyDmH4ZbzeBY6WUnrlOBhXqouGssttfRreI",  authDomain: "noctra-682b0.firebaseapp.com",  projectId: "noctra-682b0",  storageBucket: "noctra-682b0.firebasestorage.app",  messagingSenderId: "585618824787",  appId: "1:585618824787:web:dfcc5ed1bb92104c00b0a6"};// Initialize Firebaseconst app = initializeApp(firebaseConfig);

i have enabled git auth with my firebase
and Cloud Firestore

now go continue

proceed
do not use env
just create a file for it and export / import it to anywhere needed

### Dev Space - Comprehensive Platform Plan

I'll create a detailed plan for the Dev Space platform before we begin implementation. Here's the strategic breakdown:

## **Core Features Architecture**

### **1. User & Profile Management**
- Developer profiles with bio, skills, experience level, social links
- Portfolio showcase (featured projects, contributions)
- Reputation/credibility system (badges, endorsements, activity metrics)
- Privacy controls and profile visibility settings

### **2. Activity Feed**
- Real-time feed of followed developers' activities
- Project updates, discussions, and contributions
- Filtering by topic, language, or activity type
- Engagement metrics (likes, comments, shares)

### **3. Project Repository System**
- Project creation and management
- Collaborative project spaces with role-based access
- Project showcase with descriptions, tech stack, live links
- Integration with GitHub/GitLab for syncing repositories
- Project discovery and trending algorithms

### **4. Collaboration & Tasks**
- Task/issue creation within projects
- Assignment and progress tracking
- Code review system with inline comments
- Contribution tracking and credit attribution

### **5. Discussion & Knowledge Sharing**
- Topic-based discussion forums
- Q&A system with voting and accepted answers
- Threaded comments and nested replies
- Search and tagging system

### **6. Messaging System**
- Direct messaging between developers
- Group chat for project teams
- Notification preferences and read receipts
- Message history and search

### **7. Developer Tool Integrations**
- GitHub/GitLab OAuth authentication
- Slack notifications
- IDE extensions (VS Code plugin)
- API webhooks for external tools

---

## **User Experience Considerations**

| Aspect | Strategy |
|--------|----------|
| **Onboarding** | Guided profile setup, skill selection, interest-based recommendations |
| **Discovery** | Personalized recommendations, trending projects, skill-based matching |
| **Engagement** | Gamification (badges, streaks), notifications, community challenges |
| **Accessibility** | Dark mode, keyboard navigation, screen reader support |
| **Mobile** | Responsive design, native mobile app (future phase) |

---

## **Technical Architecture**

### **Frontend Stack**
- **Framework**: Next.js 16 (App Router)
- **UI**: React 19 with shadcn/ui components
- **Styling**: Tailwind CSS v4
- **Real-time**: WebSocket via Socket.io or Vercel Queues
- **State Management**: SWR for data fetching, React Context for UI state

### **Backend Stack**
- **API**: Next.js Route Handlers & Server Actions
- **Database**: Supabase (PostgreSQL) with Row Level Security
- **Authentication**: Supabase Auth + OAuth (GitHub)
- **File Storage**: Vercel Blob for avatars, project images
- **Real-time Database**: Supabase Realtime for live updates
- **Caching**: Upstash Redis for sessions, activity feeds
- **Search**: Upstash Search for full-text search across projects/discussions

### **Infrastructure**
- **Hosting**: Vercel (auto-scaling, edge functions)
- **Database**: Supabase (managed PostgreSQL)
- **CDN**: Vercel Edge Network
- **Monitoring**: Vercel Analytics & Error Tracking

---

## **Database Schema (Core Tables)**

```
users
├── id, email, username, avatar_url, bio, skills[], social_links
├── created_at, updated_at, last_active

projects
├── id, owner_id, title, description, tech_stack[], github_url
├── visibility (public/private), created_at, updated_at

collaborations
├── id, project_id, user_id, role (owner/contributor/viewer)
├── joined_at

discussions
├── id, creator_id, title, content, category, tags[]
├── created_at, updated_at, view_count

messages
├── id, sender_id, recipient_id/group_id, content, read_at
├── created_at

activities
├── id, user_id, action_type, related_entity, created_at

connections
├── id, follower_id, following_id, created_at
```

---

## **Scalability & Real-time Strategy**

| Challenge | Solution |
|-----------|----------|
| **Real-time Updates** | WebSocket connections via Socket.io, Supabase Realtime subscriptions |
| **Activity Feed** | Materialized views, Redis caching, pagination with cursor-based loading |
| **Search Performance** | Upstash Search for indexed full-text search |
| **Database Load** | Connection pooling, read replicas, query optimization |
| **File Uploads** | Vercel Blob with CDN, image optimization |
| **Concurrent Users** | Vercel auto-scaling, database connection limits management |

---

## **Implementation Phases**

### **Phase 1: MVP**
- User authentication & profiles
- Project creation & showcase
- Basic activity feed
- Discussion forums

### **Phase 2: Collaboration**
- Messaging system
- Task/issue management
- Code review features

### **Phase 3: Integration & Polish**
- GitHub integration
- Notifications system
- Search optimization
- Performance tuning

### **Phase 4: Advanced Features**

- AI-powered recommendations
- Live coding sessions
- Marketplace for tools/templates

---

## **Key Metrics & Success Indicators**

- User retention rate (30-day, 90-day)
- Project creation rate
- Collaboration participation
- Discussion engagement
- Real-time message latency (<100ms)
- Platform uptime (99.9%+)

---

## **Next Steps**

Would you like me to proceed with implementation? I recommend starting with:

1. **Phase 1 MVP** - Build the foundation (auth, profiles, projects, feed)
2. **Database setup** - Create Supabase schema and RLS policies
3. **UI scaffolding** - Design system and core components

**Questions before we start:**
- Should we build the mobile app simultaneously or focus on web first?
- Do you want AI-powered features (recommendations, content moderation) from the start?
- Any specific developer tools you want to prioritize for integration?
- Should we include a freemium model or start with free-only?

Please approve this plan or suggest modifications, and I'll begin implementation!
